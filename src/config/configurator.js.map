{"version":3,"sources":["../../src/config/configurator.js"],"names":["config","get","set","key","value","newConfig","Object","assign","writeFile","__dirname","JSON","stringify","err"],"mappings":";;;;;;AACA;;;;AACA;;;;;;kNAFA;;;AAIA,IAAIA,yBAAJ;;kBAEe;AACXC,SAAK,eAAM;AACP,eAAOD,MAAP;AACH,KAHU;AAIXE,SAAK,aAACC,GAAD,EAAMC,KAAN,EAAgB;AACjB,YAAGJ,OAAOG,GAAP,MAAgBC,KAAnB,EAA0B;AACtB,gBAAIC,YAAYC,OAAOC,MAAP,CAAc,EAAd,EAAkBP,MAAlB,sBAA4BG,GAA5B,EAAkCC,KAAlC,EAAhB;AACA,yBAAGI,SAAH,CAAaC,YAAY,cAAzB,EAAyCC,KAAKC,SAAL,CAAeN,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAzC,EAA6E,UAAUO,GAAV,EAAe;AACxF,oBAAIA,GAAJ,EAAS,MAAMA,GAAN;AACTZ,yBAASK,SAAT;AACH,aAHD;AAIH;AACJ;AAZU,C","file":"configurator.js","sourcesContent":["// This file will not cause nodemon to restart\r\nimport fs from 'fs';\r\nimport configFile from './config.json';\r\n\r\nlet config = configFile;\r\n\r\nexport default {\r\n    get: () => {\r\n        return config;\r\n    },\r\n    set: (key, value) => {\r\n        if(config[key] !== value) {\r\n            let newConfig = Object.assign({}, config, {[key]: value});\r\n            fs.writeFile(__dirname + '/config.json', JSON.stringify(newConfig, null, 2), function (err) {\r\n                if (err) throw err;\r\n                config = newConfig;\r\n            });\r\n        }\r\n    }\r\n}"]}